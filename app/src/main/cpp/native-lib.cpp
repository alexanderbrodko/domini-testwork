#include <jni.h>
#include <string>
#include <GLES2/gl2.h>
#include <GLES2/gl2ext.h>
#include <android/log.h>
#include <cmath>
#include "Matrix.h"
#include "Batch.h"

const char* vertexShaderSource = R"(
uniform mat4 uProjectionMatrix;
uniform mat4 uModelViewMatrix;
attribute vec3 aPosition;
attribute vec3 aNormal;
attribute vec2 aTexCoord;
varying vec3 vNormal;
varying vec3 vPosition;
varying vec2 vTexCoord;
void main() {
    vec4 worldPosition = uModelViewMatrix * vec4(aPosition, 1.0);
    vPosition = worldPosition.xyz;
    vNormal = mat3(uModelViewMatrix) * aNormal;
    vTexCoord = aTexCoord;
    gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aPosition, 1.0);
}
)";


const char* fragmentShaderSource = R"(
precision mediump float;
varying vec3 vNormal;
varying vec3 vPosition;
varying vec2 vTexCoord;
uniform sampler2D uTexture;
uniform vec3 uViewPosition;
uniform vec3 uLightPosition;
uniform vec3 uLightColor;
void main() {
    vec3 normal = normalize(vNormal);
    vec3 lightDirection = normalize(uLightPosition - vPosition);
    float diff = max(dot(normal, lightDirection), 0.0);

    vec3 viewDirection = normalize(uViewPosition - vPosition);
    vec3 reflectDirection = reflect(-lightDirection, normal);
    float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), 32.0);

    vec3 ambient = 0.1 * uLightColor;
    vec3 diffuse = diff * uLightColor;
    vec3 specular = spec * uLightColor;

    vec4 textureColor = texture2D(uTexture, vTexCoord);
    vec3 finalColor = (ambient + diffuse + specular) * textureColor.rgb;

    // дополнительный блик
    float lum = dot(textureColor.rgb, vec3(0.299, 0.587, 0.114));
    finalColor += pow(lum, 10.0) * specular * 10.0;

    gl_FragColor = vec4(finalColor, textureColor.a);
}
)";


const uint8_t imageData[] = {
        0x7d, 0x7d, 0x7d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x67, 0x67, 0x67, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x73, 0x73, 0x73, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff,
        0x7d, 0x7d, 0x7d, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0xf5, 0xeb, 0x5d, 0xff, 0xfb, 0xce, 0x77, 0xff, 0x67, 0x67, 0x67, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x7d, 0x7d, 0x7d, 0xff,
        0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0xf5, 0xeb, 0x5d, 0xff, 0xfb, 0xce, 0x77, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xe7, 0xc7, 0xff, 0x73, 0x73, 0x73, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0xf5, 0xeb, 0x5d, 0xff, 0x7d, 0x7d, 0x7d, 0xff,
        0x67, 0x67, 0x67, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x73, 0x73, 0x73, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0xfe, 0xe7, 0xc7, 0xff, 0xfb, 0xce, 0x77, 0xff, 0xff, 0xff, 0xff, 0xff, 0x67, 0x67, 0x67, 0xff,
        0x7d, 0x7d, 0x7d, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0xfe, 0xe7, 0xc7, 0xff, 0xfb, 0xce, 0x77, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x7d, 0x7d, 0x7d, 0xff,
        0x7d, 0x7d, 0x7d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0xf5, 0xeb, 0x5d, 0xff, 0xf5, 0xeb, 0x5d, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x67, 0x67, 0x67, 0xff, 0x73, 0x73, 0x73, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff,
        0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0xf5, 0xeb, 0x5d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x7d, 0x7d, 0x7d, 0xff,
        0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x67, 0x67, 0x67, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0xf5, 0xeb, 0x5d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0xfb, 0xce, 0x77, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff,
        0x7d, 0x7d, 0x7d, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0xf5, 0xeb, 0x5d, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x7d, 0x7d, 0x7d, 0xff,
        0x7d, 0x7d, 0x7d, 0xff, 0xfb, 0xce, 0x77, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0xfb, 0xce, 0x77, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x67, 0x67, 0x67, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x73, 0x73, 0x73, 0xff,
        0x7d, 0x7d, 0x7d, 0xff, 0x67, 0x67, 0x67, 0xff, 0x73, 0x73, 0x73, 0xff, 0xf5, 0xeb, 0x5d, 0xff, 0x67, 0x67, 0x67, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0xfe, 0xe7, 0xc7, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xce, 0x77, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff,
        0x7d, 0x7d, 0x7d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x67, 0x67, 0x67, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0xf5, 0xeb, 0x5d, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x7d, 0x7d, 0x7d, 0xff,
        0x7d, 0x7d, 0x7d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0xf5, 0xeb, 0x5d, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x67, 0x67, 0x67, 0xff,
        0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x7e, 0x7e, 0x7e, 0xff, 0x7e, 0x7e, 0x7e, 0xff, 0x7e, 0x7e, 0x7e, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x67, 0x67, 0x67, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x67, 0x67, 0x67, 0xff, 0x7d, 0x7d, 0x7d, 0xff,
        0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x7e, 0x7e, 0x7e, 0xff, 0x7e, 0x7e, 0x7e, 0xff, 0x7e, 0x7e, 0x7e, 0xff, 0x73, 0x73, 0x73, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0xfe, 0xe7, 0xc7, 0xff, 0xf5, 0xeb, 0x5d, 0xff, 0x8d, 0x8d, 0x8d, 0xff, 0x67, 0x67, 0x67, 0xff,
        0x7d, 0x7d, 0x7d, 0xff, 0x7e, 0x7e, 0x7e, 0xff, 0x7e, 0x7e, 0x7e, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x67, 0x67, 0x67, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x73, 0x73, 0x73, 0xff, 0x7d, 0x7d, 0x7d, 0xff, 0x7d, 0x7d, 0x7d, 0xff,
};

const GLfloat vertices[] = {
        // Back face
        -1.0f, 1.0f, -1.0f,
        -1.0f, -1.0f, -1.0f,
        1.0f, -1.0f, -1.0f,
        1.0f, 1.0f, -1.0f,
        // Front face
        -1.0f, 1.0f, 1.0f,
        -1.0f, -1.0f, 1.0f,
        1.0f, -1.0f, 1.0f,
        1.0f, 1.0f, 1.0f,
        // Left face
        -1.0f, 1.0f, 1.0f,
        -1.0f, -1.0f, 1.0f,
        -1.0f, -1.0f, -1.0f,
        -1.0f, 1.0f, -1.0f,
        // Right face
        1.0f, 1.0f, 1.0f,
        1.0f, -1.0f, 1.0f,
        1.0f, -1.0f, -1.0f,
        1.0f, 1.0f, -1.0f,
        // Top face
        -1.0f, 1.0f, 1.0f,
        -1.0f, 1.0f, -1.0f,
        1.0f, 1.0f, -1.0f,
        1.0f, 1.0f, 1.0f,
        // Bottom face
        -1.0f, -1.0f, 1.0f,
        -1.0f, -1.0f, -1.0f,
        1.0f, -1.0f, -1.0f,
        1.0f, -1.0f, 1.0f
};

const GLfloat normals[] = {
        // Back face
        0.0f, 0.0f, -1.0f,
        0.0f, 0.0f, -1.0f,
        0.0f, 0.0f, -1.0f,
        0.0f, 0.0f, -1.0f,
        // Front face
        0.0f, 0.0f, 1.0f,
        0.0f, 0.0f, 1.0f,
        0.0f, 0.0f, 1.0f,
        0.0f, 0.0f, 1.0f,
        // Left face
        -1.0f, 0.0f, 0.0f,
        -1.0f, 0.0f, 0.0f,
        -1.0f, 0.0f, 0.0f,
        -1.0f, 0.0f, 0.0f,
        // Right face
        1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f,
        // Top face
        0.0f, 1.0f, 0.0f,
        0.0f, 1.0f, 0.0f,
        0.0f, 1.0f, 0.0f,
        0.0f, 1.0f, 0.0f,
        // Bottom face
        0.0f, -1.0f, 0.0f,
        0.0f, -1.0f, 0.0f,
        0.0f, -1.0f, 0.0f,
        0.0f, -1.0f, 0.0f
};

const GLfloat texCoords[] = {
        // Back face
        0.0f, 0.0f,
        0.0f, 1.0f,
        1.0f, 1.0f,
        1.0f, 0.0f,
        // Front face
        0.0f, 0.0f,
        0.0f, 1.0f,
        1.0f, 1.0f,
        1.0f, 0.0f,
        // Left face
        0.0f, 0.0f,
        0.0f, 1.0f,
        1.0f, 1.0f,
        1.0f, 0.0f,
        // Right face
        0.0f, 0.0f,
        0.0f, 1.0f,
        1.0f, 1.0f,
        1.0f, 0.0f,
        // Top face
        0.0f, 0.0f,
        0.0f, 1.0f,
        1.0f, 1.0f,
        1.0f, 0.0f,
        // Bottom face
        0.0f, 0.0f,
        0.0f, 1.0f,
        1.0f, 1.0f,
        1.0f, 0.0f
};

const GLushort indices[] = {
        0, 1, 2, 0, 2, 3,   // Back face
        4, 5, 6, 4, 6, 7,   // Front face
        8, 9, 10, 8, 10, 11, // Left face
        12, 13, 14, 12, 14, 15, // Right face
        16, 17, 18, 16, 18, 19, // Top face
        20, 21, 22, 20, 22, 23  // Bottom face
};



Batch batch;

extern "C"
JNIEXPORT void JNICALL
Java_com_example_testwork_MyGLRenderer_nativeOnSurfaceCreated([[maybe_unused]] JNIEnv* env,
                                                              [[maybe_unused]] jobject obj) {
    batch.initProgram(vertexShaderSource, fragmentShaderSource);
    batch.setIndexData(indices);
    batch.setAttribData("aPosition", vertices, 3, GL_FLOAT);
    batch.setAttribData("aNormal", normals, 3, GL_FLOAT);
    batch.setAttribData("aTexCoord", texCoords, 2, GL_FLOAT);
    batch.setTexture("uTexture", imageData, 16, 16, 4, GL_NEAREST);
}

extern "C"
JNIEXPORT void JNICALL
Java_com_example_testwork_MyGLRenderer_nativeOnSurfaceChanged([[maybe_unused]] JNIEnv* env,
                                    [[maybe_unused]] jobject obj, jint width, jint height) {
    batch.setViewport(width, height);
}

extern "C"
JNIEXPORT void JNICALL
Java_com_example_testwork_MyGLRenderer_nativeOnDrawFrame([[maybe_unused]] JNIEnv* env,
                               [[maybe_unused]] jobject obj, jfloat orbit) {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    Matrix modelViewMatrix;

    modelViewMatrix.translate(0.0f, 0.0f, -10.0f);
    modelViewMatrix.rotate(0.5, 1.0f, 0.0f, 0.0f);

    modelViewMatrix.rotate(orbit, 0.0f, 1.0f, 0.0f);
    modelViewMatrix.translate(0.0f, 0.0f, -2.0f);

    const GLfloat lightPos[] = {0.0f, 1.0f, 0.0f};
    batch.setUniform("uLightPosition", lightPos);

    const GLfloat lightColor[] = {1.0f, 0.9f, 0.6f};
    batch.setUniform("uLightColor", lightColor);

    const GLfloat viewPos[] = {0.0f, 0.0f, 0.0f};
    batch.setUniform("uViewPosition", viewPos);

    batch.draw(modelViewMatrix);
}

